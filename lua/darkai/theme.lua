local c = require('darkai.palette')
local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function()
  hl(0, "ColorColumn",          { fg = 'NONE'       , bg = c.ui_bg      })
  hl(0, "Conceal",              { fg = c.grey       , bg = 'NONE'       })
  hl(0, "Cursor",               { fg = 'NONE'       , bg = 'NONE'      , reverse=true })
  hl(0, "CursorIM",             { fg = 'NONE'       , bg = 'NONE'      , reverse=true })
  hl(0, "CursorLine",           { fg = 'NONE'       , bg = c.word_bg    })
  hl(0, "CursorLineNr",         { fg = c.yellow     , bg = c.word_bg    })
  hl(0, "CursorColumn",         { fg = 'NONE'       , bg = c.ui_bg      })
  hl(0, "iCursor",              { fg = 'NONE'       , bg = 'NONE'      , reverse=true })
  hl(0, "vCursor",              { fg = 'NONE'       , bg = 'NONE'      , reverse=true })
  hl(0, "lCursor",              { fg = 'NONE'       , bg = 'NONE'      , reverse=true })
  hl(0, "LineNr",               { fg = c.grey       , bg = c.bg         })
  hl(0, "DiffAdd",              { fg = 'NONE'       , bg = c.diff_add   })
  hl(0, "DiffChange",           { fg = 'NONE'       , bg = c.diff_change })
  hl(0, "DiffDelete",           { fg = 'NONE'       , bg = c.diff_remove })
  hl(0, "DiffText",             { fg = 'NONE'       , bg = c.diff_text  })
  hl(0, "Directory",            { fg = c.light_blue , bg = 'NONE'       })
  hl(0, "EndOfBuffer",          { fg = c.bg         , bg = 'NONE'       })
  hl(0, "ErrorMsg",             { fg = c.red        , bg = c.bg        , bold=true })
  hl(0, "FloatBoder",           { fg = c.grey       , bg = c.alt_bg     })
  hl(0, "FoldColumn",           { fg = c.white      , bg = c.black      })
  hl(0, "Folded",               { fg = c.grey       , bg = c.ui_bg })
  hl(0, "IncSearch",            { fg = c.bg         , bg = c.orange     })
  hl(0, "MatchParenCur",        { fg = 'NONE'       , bg = c.reference  })
  hl(0, "MatchParen",           { fg = c.pink       , bg = 'NONE'       })
  hl(0, "MatchWordCur",         { fg = 'NONE'       , bg = c.reference  })
  hl(0, "MatchWord",            { fg = 'NONE'       , bg = c.reference  })
  hl(0, "ModeMsg",              { fg = c.white      , bg = 'NONE'      , bold=true })
  hl(0, "MoreMsg",              { fg = c.white      , bg = 'NONE'      , bold=true })
  hl(0, "MsgArea",              { fg = c.fg         , bg = c.bg         })
  hl(0, "MsgSeparator",         { fg = c.fg         , bg = c.bg         })
  hl(0, "NonText",              { fg = c.bg         , bg = 'NONE'       })
  hl(0, "Normal",               { fg = c.white      , bg = 'NONE'       })
  hl(0, "NormalFloat",          { fg = 'NONE'       , bg = c.ui_bg      })
  hl(0, "NormalNC",             { fg = c.fg         , bg = c.bg         })
  hl(0, "Pmenu",                { fg = c.white      , bg = c.pmenu_bg   })
  hl(0, "PmenuSbar",            { fg = 'NONE'       , bg = c.alt_bg     })
  hl(0, "PmenuSel",             { fg = c.white      , bg = c.pmenu_sel_bg })
  hl(0, "PmenuThumb",           { fg = c.purple     , bg = c.pmenu_thumb_bg })
  hl(0, "Question",             { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "QuickFixLine",         { fg = c.purple     , bg = 'NONE'      , bold=true })
  hl(0, "Search",               { fg = 'NONE'       , bg = c.search_bg  })
  hl(0, "SignColumn",           { fg = c.white      , bg = c.bg         })
  hl(0, "SpecialKey",           { fg = c.pink       , bg = 'NONE'       })
  hl(0, "SpellBad",             { fg = 'NONE'       , bg = 'NONE'      , undercurl=true })
  hl(0, "SpellCap",             { fg = 'NONE'       , bg = 'NONE'      , undercurl=true })
  hl(0, "SpellLocal",           { fg = 'NONE'       , bg = 'NONE'      , undercurl=true })
  hl(0, "SpellRare",            { fg = 'NONE'       , bg = 'NONE'      , undercurl=true })
  hl(0, "Substitute",           { fg = 'NONE'       , bg = c.darkred    })
  hl(0, "TabLine",              { fg = c.lightgrey  , bg = c.lightblack })
  hl(0, "TabLineFill",          { fg = c.blue       , bg = c.word_bg })
  hl(0, "TabLineSel",           { fg = c.darkblack  , bg = c.warmgrey  , bold=true })
  hl(0, "TermCursor",           { fg = c.bg         , bg = c.fg         })
  hl(0, "TermCursorNC",         { fg = c.bg         , bg = c.fg         })
  hl(0, "VertSplit",            { fg = c.vert_split_fg, bg = c.bg       })
  hl(0, "Visual",               { fg = 'NONE'       , bg = c.visual_bg  })
  hl(0, "VisualNOS",            { fg = 'NONE'       , bg = c.ui_bg      })
  hl(0, "WarningMsg",           { fg = c.yellow     , bg = c.bg        , bold=true })
  hl(0, "Whitespace",           { fg = c.bg         , bg = 'NONE'       })
  hl(0, "WildMenu",             { fg = c.white      , bg = c.orange     })

  -- Code -- Generic Syntax Highlighting

  hl(0, "Constant",             { fg = c.purple     , bg = 'NONE'       })
  hl(0, "Number",               { fg = c.purple     , bg = 'NONE'       })
  hl(0, "Float",                { fg = c.purple     , bg = 'NONE'       })
  hl(0, "Boolean",              { fg = c.purple     , bg = 'NONE'       })
  hl(0, "Character",            { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "String",               { fg = c.yellow     , bg = 'NONE'       })

  hl(0, "Type",                 { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "Structure",            { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "StorageClass",         { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "Typedef",              { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "Identifier",           { fg = c.white      , bg = 'NONE'       })
  hl(0, "Function",             { fg = c.green      , bg = 'NONE'       })
  hl(0, "FunctionDefine",       { fg = c.purple     , bg = 'NONE'       })
  hl(0, "Variable",             { fg = 'NONE'       , bg = 'NONE'       })
  hl(0, "Statement",            { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Operator",             { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Keyword",              { fg = c.pink       , bg = 'NONE'       })
  hl(0, "PreProc",              { fg = c.green      , bg = 'NONE'       })
  hl(0, "Include",              { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Define",               { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Macro",                { fg = c.pink       , bg = 'NONE'       })
  hl(0, "PreCondit",            { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Special",              { fg = c.purple     , bg = 'NONE'       })
  hl(0, "SpecialChar",          { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Delimiter",            { fg = c.white0     , bg = 'NONE'       })
  hl(0, "SpecialComment",       { fg = c.grey       , bg = 'NONE'       })
  hl(0, "Tag",                  { fg = c.orange     , bg = 'NONE'       })

  hl(0, "Todo",                 { fg = c.orange     , bg = 'NONE'       })
  hl(0, "Comment",              { fg = c.warmgrey   , bg = 'NONE'       })

  hl(0, "Underlined",           { fg = 'NONE'       , bg = 'NONE'      , underline=true })
  hl(0, "Italic",               { fg = 'NONE'       , bg = 'NONE'      , italic=true })
  hl(0, "Bold",                 { fg = 'NONE'       , bg = 'NONE'      , bold=true })
  hl(0, "Ignore",               { fg = c.red        , bg = 'NONE'       })
  hl(0, "Error",                { fg = c.red        , bg = c.darkred    })

  hl(0, "Conditional",          { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Debug",                { fg = c.orange     , bg = 'NONE'       })
  hl(0, "Exception",            { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Label",                { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Repeat",               { fg = c.pink       , bg = 'NONE'       })
  hl(0, "Title",                { fg = c.yellow     , bg = 'NONE'      , bold=true })

  -- markdown
  hl(0, "markdownBlockquote",   { fg = c.orange     , bg = 'NONE'       })
  hl(0, "markdownCode",         { fg = c.purple     , bg = 'NONE'      , italic=true })
  hl(0, "markdownCodeBlock",    { fg = c.orange     , bg = 'NONE'       })
  hl(0, "markdownCodeDelimiter",{ fg = c.orange     , bg = 'NONE'       })
  hl(0, "markdownH1",           { link = 'Title' })
  hl(0, "markdownH2",           { link = 'Title' })
  hl(0, "markdownH3",           { link = 'Title' })
  hl(0, "markdownH4",           { link = 'Title' })
  hl(0, "markdownH5",           { link = 'Title' })
  hl(0, "markdownH6",           { link = 'Title' })
  hl(0, "markdownHeadingDelimiter",{ fg = c.blue    , bg = 'NONE'       })
  hl(0, "markdownHeadingRule",  { fg = c.fg         , bg = 'NONE'      , bold=true })
  hl(0, "markdownId",           { link = 'Identifier' })
  hl(0, "markdownIdDeclaration",{ fg = c.blue       , bg = 'NONE'       })
  hl(0, "markdownIdDelimiter",  { fg = c.light_grey , bg = 'NONE'       })
  hl(0, "markdownLinkDelimiter",{ fg = c.light_grey , bg = 'NONE'       })
  hl(0, "markdownBold",         { fg = c.blue       , bg = 'NONE'      , bold=true })
  hl(0, "markdownItalic",       { link = 'Italic' })
  hl(0, "markdownBoldItalic",   { fg = c.yellow     , bg = 'NONE'      , bold=true, italic=true })
  hl(0, "markdownListMarker",   { fg = c.purple     , bg = 'NONE'       })
  hl(0, "markdownOrderedListMarker",{ fg = c.purple , bg = 'NONE'       })
  hl(0, "markdownRule",         { fg = c.grey       , bg = 'NONE'       })
  if vim.fn.has("nvim-0.7.3") == 1 then
    hl(0, "markdownUrl",        { fg = c.cyan, bg = 'NONE', underdotted=true, })
  else
    hl(0, "markdownUrl",        { fg = c.cyan, bg = 'NONE', underdot=true, })
  end
  hl(0, "markdownLinkText",     { fg = c.blue       , bg = 'NONE'       })
  hl(0, "markdownFootnote",     { fg = c.orange     , bg = 'NONE'       })
  hl(0, "markdownFootnoteDefinition",{ fg = c.orange, bg = 'NONE'       })
  hl(0, "markdownEscape",       { fg = c.yellow     , bg = 'NONE'       })

  -- Whichkey
  hl(0, "WhichKey",             { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "WhichKeyGroup",        { fg = c.purple     , bg = 'NONE'       })
  hl(0, "WhichKeySeperator",    { fg = c.green      , bg = 'NONE'       })
  hl(0, "WhichKeyDesc",         { fg = c.fg         , bg = 'NONE'       })
  hl(0, "WhichKeyFloat",        { fg = 'NONE'       , bg = c.alt_bg     })
  hl(0, "WhichKeyBorder",       { fg=c.vert_split_fg, bg = c.alt_bg     })

  -- Git
  hl(0, "SignAdd",              { fg = c.sign_add   , bg = 'NONE'       })
  hl(0, "SignChange",           { fg = c.sign_change, bg = 'NONE'       })
  hl(0, "SignDelete",           { fg = c.sign_delete, bg = 'NONE'       })
  hl(0, "GitSignsAdd",          { fg = c.sign_add   , bg = 'NONE'       })
  hl(0, "GitSignsChange",       { fg = c.sign_change, bg = 'NONE'       })
  hl(0, "GitSignsDelete",       { fg = c.sign_delete, bg = 'NONE'       })

  -- Lsp
  hl(0, "DiagnosticHint",       { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "DiagnosticInfo",       { fg = c.orange     , bg = 'NONE'       })
  hl(0, "DiagnosticWarn",       { fg = c.orange     , bg = 'NONE'       })
  hl(0, "DiagnosticError",      { fg = c.red        , bg = 'NONE'       })
  hl(0, "DiagnosticOther",      { fg = c.purple     , bg = 'NONE'       })
  hl(0, "DiagnosticSignHint",   { link = 'DiagnosticHint' })
  hl(0, "DiagnosticSignInfo",   { link = 'DiagnosticInfo' })
  hl(0, "DiagnosticSignWarn",   { link = 'DiagnosticWarn' })
  hl(0, "DiagnosticSignError",  { link = 'DiagnosticError' })
  hl(0, "DiagnosticSignOther",  { link = 'DiagnosticOther' })
  hl(0, "DiagnosticSignWarning",{ link = 'DiagnosticWarn' })
  hl(0, "DiagnosticFloatingHint",{ link = 'DiagnosticHint' })
  hl(0, "DiagnosticFloatingInfo",{ link = 'DiagnosticInfo' })
  hl(0, "DiagnosticFloatingWarn",{ link = 'DiagnosticWarn' })
  hl(0, "DiagnosticFloatingError",{ link = 'DiagnosticError' })
  hl(0, "DiagnosticUnderlineHint",{ fg = 'NONE'     , bg = 'NONE'      , sp = c.aqua, undercurl=true })
  hl(0, "DiagnosticUnderlineInfo",{ fg = 'NONE'     , bg = 'NONE'      , sp = c.white, undercurl=true })
  hl(0, "DiagnosticUnderlineWarn",{ fg = 'NONE'     , bg = 'NONE'      , sp = c.yellow, undercurl=true })
  hl(0, "DiagnosticUnderlineError",{ fg = 'NONE'    , bg = 'NONE'      , sp = c.red, undercurl=true })
  hl(0, "DiagnosticSignInformation",{ link = 'DiagnosticInfo' })
  hl(0, "DiagnosticVirtualTextHint",{ fg = c.aqua   , bg = 'NONE'       })
  hl(0, "DiagnosticVirtualTextInfo",{ fg = c.white  , bg = 'NONE'       })
  hl(0, "DiagnosticVirtualTextWarn",{ fg = c.yellow , bg = 'NONE'       })
  hl(0, "DiagnosticVirtualTextError",{ fg = c.red   , bg = 'NONE'       })

  hl(0, "LspDiagnosticsError",  { fg = c.red        , bg = 'NONE'       })
  hl(0, "LspDiagnosticsWarning",{ fg = c.orange     , bg = 'NONE'       })
  hl(0, "LspDiagnosticsInfo",   { fg = c.orange     , bg = 'NONE'       })
  hl(0, "LspDiagnosticsHint",   { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "LspDiagnosticsInformation",{ link = 'LspDiagnosticsInfo' })
  hl(0, "LspDiagnosticsDefaultError",{ link = 'LspDiagnosticsError' })
  hl(0, "LspDiagnosticsDefaultWarning",{ link = 'LspDiagnosticsWarning' })
  hl(0, "LspDiagnosticsDefaultInformation",{ link = 'LspDiagnosticsInfo' })
  hl(0, "LspDiagnosticsDefaultInfo",{ link = 'LspDiagnosticsInfo' })
  hl(0, "LspDiagnosticsDefaultHint",{ link = 'LspDiagnosticsHint' })
  hl(0, "LspDiagnosticsVirtualTextError",{ link = 'DiagnosticVirtualTextError' })
  hl(0, "LspDiagnosticsVirtualTextWarning",{ link = 'DiagnosticVirtualTextWarn' })
  hl(0, "LspDiagnosticsVirtualTextInformation",{ link = 'DiagnosticVirtualTextInfo' })
  hl(0, "LspDiagnosticsVirtualTextInfo",{ link = 'DiagnosticVirtualTextInfo' })
  hl(0, "LspDiagnosticsVirtualTextHint",{ link = 'DiagnosticVirtualTextHint' })
  hl(0, "LspDiagnosticsFloatingError",{ link = 'LspDiagnosticsError' })
  hl(0, "LspDiagnosticsFloatingWarning",{ link = 'LspDiagnosticsWarning' })
  hl(0, "LspDiagnosticsFloatingInformation",{ link = 'LspDiagnosticsInfo' })
  hl(0, "LspDiagnosticsFloatingInfo",{ link = 'LspDiagnosticsInfo' })
  hl(0, "LspDiagnosticsFloatingHint",{ link = 'LspDiagnosticsHint' })
  hl(0, "LspDiagnosticsSignError",{ link = 'LspDiagnosticsError' })
  hl(0, "LspDiagnosticsSignWarning",{ link = 'LspDiagnosticsWarning' })
  hl(0, "LspDiagnosticsSignInformation",{ link = 'LspDiagnosticsInfo' })
  hl(0, "LspDiagnosticsSignInfo",{ link = 'LspDiagnosticsInfo' })
  hl(0, "LspDiagnosticsSignHint",{ link = 'LspDiagnosticsHint' })
  hl(0, "LspDiagnosticsUnderlineError",{ link = 'DiagnosticUnderlineError' })
  hl(0, "LspDiagnosticsUnderlineWarning",{ link = 'DiagnosticUnderlineWarn' })
  hl(0, "LspDiagnosticsUnderlineInformation",{ link = 'DiagnosticUnderlineInfo' })
  hl(0, "LspDiagnosticsUnderlineInfo",{ link = 'DiagnosticUnderlineInfo' })
  hl(0, "LspDiagnosticsUnderlineHint",{ link = 'DiagnosticUnderlineHint' })

  hl(0, "LspReferenceRead",     { fg = 'NONE'       , bg = c.word_bg }) --, underline=true })
  hl(0, "LspReferenceText",     { fg = 'NONE'       , bg = c.word_bg }) --, underline=true })
  hl(0, "LspReferenceWrite",    { fg = 'NONE'       , bg = c.word_bg }) --, underline=true })
  hl(0, "LspCodeLens",          { fg = c.context    , bg = 'NONE'      , italic=true })
  hl(0, "LspCodeLensSeparator", { fg = c.context    , bg = 'NONE'      , italic=true })

  hl(0, "NvimTreeLspDiagnosticsError",{ link = 'LspDiagnosticsError' })
  hl(0, "NvimTreeLspDiagnosticsWarning",{ link = 'LspDiagnosticsWarning' })
  hl(0, "NvimTreeLspDiagnosticsInformation",{ link = 'LspDiagnosticsInfo' })
  hl(0, "NvimTreeLspDiagnosticsInfo",{ link = 'LspDiagnosticsInfo' })
  hl(0, "NvimTreeLspDiagnosticsHint",{ link = 'LspDiagnosticsHint' })


  hl(0, "IlluminatedWordRead",  { link = 'LspReferenceRead' })
  hl(0, "IlluminatedWordText",  { link = 'LspReferenceText' })
  hl(0, "IlluminatedWordWrite", { link = 'LspReferenceWrite' })
  hl(0, "IlluminatedWord",      { link = 'LspReferenceText' })  --?

  -- Telescope
  hl(0, "TelescopeSelection",   { fg = c.white      , bg = c.word_bg    })
  hl(0, "TelescopeSelectionCaret",{ fg = c.green    , bg = c.bg         })
  hl(0, "TelescopeMatching",    { fg = c.green      , bg = c.bg         })
  hl(0, "TelescopeBorder",      { fg = c.warmgrey   , bg = c.bg         })
  hl(0, "TelescopeNormal",      { fg = 'NONE'       , bg = c.bg         })
  hl(0, "TelescopePromptBorder",{ fg = c.white      , bg = c.bg         })
  hl(0, "TelescopePromptNormal",{ fg = c.white      , bg = c.bg         })
  hl(0, "TelescopePromptPrefix",{ fg = c.yellow     , bg = c.bg         })
  hl(0, "TelescopePromptTitle", { fg = c.white      , bg = c.bg         , bold=true })
  hl(0, "TelescopePromptCounter",{ fg = c.yellow    , bg = 'NONE'       })
  hl(0, "TelescopeResultsTitle",{ fg = c.white      , bg = c.bg         })
  hl(0, "TelescopePreviewTitle",{ fg = c.white      , bg = 'NONE'       })
  hl(0, "TelescopePreviewNormal",{ fg = 'NONE'      , bg = c.bg         })
  hl(0, "TelescopePreviewHyphen",{ fg = c.red       , bg = 'NONE'       })
  hl(0, "TelescopeMultiSelection",{ fg = c.pink     , bg = 'NONE'       })

  -- NvimTree
  hl(0, "NvimTreeFolderIcon",   { link = 'Directory' })
  hl(0, "NvimTreeFolderName",   { link = 'Directory' })
  hl(0, "NvimTreeIndentMarker", { fg = c.context    , bg = 'NONE'       })
  hl(0, "NvimTreeNormal",       { fg = 'NONE'       , bg = c.ui_bg      })
  hl(0, "NvimTreeVertSplit",    { fg = c.alt_bg     , bg = c.alt_bg     })
  hl(0, "NvimTreeOpenedFolderName",{ fg = c.light_blue, bg = 'NONE'     , bold=true })
  hl(0, "NvimTreeEmptyFolderName",{ fg = c.grey     , bg = 'NONE'       })
  hl(0, "NvimTreeGitIgnored",   { fg = c.grey       , bg = 'NONE'       , italic=true })
  hl(0, "NvimTreeImageFile",    { fg = c.light_grey , bg = 'NONE'       })
  hl(0, "NvimTreeSpecialFile",  { fg = c.white      , bg = 'NONE'       })
  hl(0, "NvimTreeEndOfBuffer",  { fg = c.alt_bg     , bg = 'NONE'       })
  hl(0, "NvimTreeCursorLine",   { fg = 'NONE'       , bg = c.line       })
  hl(0, "NvimTreeGitStaged",    { fg = c.sign_add   , bg = 'NONE'       })
  hl(0, "NvimTreeGitNew",       { fg = c.sign_add   , bg = 'NONE'       })
  hl(0, "NvimTreeGitRenamed",   { fg = c.sign_add   , bg = 'NONE'       })
  hl(0, "NvimTreeGitDeleted",   { fg = c.sign_delete, bg = 'NONE'       })
  hl(0, "NvimTreeGitMerge",     { fg = c.sign_change_alt, bg = 'NONE'   })
  hl(0, "NvimTreeGitDirty",     { fg = c.sign_change_alt, bg = 'NONE'   })
  hl(0, "NvimTreeSymlink",      { fg = c.cyan       , bg = 'NONE'       })
  hl(0, "NvimTreeRootFolder",   { fg = c.pink  , bg = 'NONE'       })
  hl(0, "NvimTreeExecFile",     { fg = c.green      , bg = 'NONE'       })

  hl(0, "LirFloatNormal",       { fg = c.fg         , bg = c.alt_bg     })
  hl(0, "LirDir",               { link = 'Directory' })
  hl(0, "LirSymLink",           { fg = c.cyan       , bg = 'NONE'       })
  hl(0, "LirEmptyDirText",      { fg = c.grey       , bg = 'NONE'       , italic=true })

  -- Buffer
  hl(0, "BufferCurrent",        { fg = c.fg         , bg = c.bg         })
  hl(0, "BufferCurrentIndex",   { fg = c.fg         , bg = c.bg         })
  hl(0, "BufferCurrentMod",     { fg = c.orange     , bg = c.bg         })
  hl(0, "BufferCurrentSign",    { fg = c.aqua       , bg = c.bg         })
  hl(0, "BufferCurrentTarget",  { fg = c.red        , bg = c.bg        , bold=true })
  hl(0, "BufferVisible",        { fg = c.fg         , bg = c.bg         })
  hl(0, "BufferVisibleIndex",   { fg = c.fg         , bg = c.bg         })
  hl(0, "BufferVisibleMod",     { fg = c.orange     , bg = c.bg         })
  hl(0, "BufferVisibleSign",    { fg = c.grey       , bg = c.bg         })
  hl(0, "BufferVisibleTarget",  { fg = c.red        , bg = c.bg        , bold=true })
  hl(0, "BufferInactive",       { fg = c.grey       , bg = c.alt_bg     })
  hl(0, "BufferInactiveIndex",  { fg = c.grey       , bg = c.alt_bg     })
  hl(0, "BufferInactiveMod",    { fg = c.orange     , bg = c.alt_bg     })
  hl(0, "BufferInactiveSign",   { fg = c.grey       , bg = c.alt_bg     })
  hl(0, "BufferInactiveTarget", { fg = c.red        , bg = c.alt_bg    , bold=true })

  -- StatusLine
  hl(0, "StatusLine",           { fg = c.warmgrey   , bg = c.bg         })
  hl(0, "StatusLineNC",         { fg = c.grey       , bg = c.bg         })
  hl(0, "StatusLineSeparator",  { fg = c.line       , bg = 'NONE'       })
  hl(0, "StatusLineTerm",       { fg = c.line       , bg = 'NONE'       })
  hl(0, "StatusLineTermNC",     { fg = c.line       , bg = 'NONE'       })

  -- IndentBlankline
  hl(0, "IndentBlanklineContextChar",{ fg = c.context, bg = 'NONE'      })
  hl(0, "IndentBlanklineContextStart",{ fg = 'NONE' , bg = 'NONE'       }) --, underline=true })
  hl(0, "IndentBlanklineChar",  { fg = c.alt_bg2  , bg = 'NONE'         })

  -- Dashboard
  hl(0, "DashboardHeader",      { fg = c.blue       , bg = 'NONE'       })
  hl(0, "DashboardCenter",      { fg = c.purple     , bg = 'NONE'       })
  hl(0, "DashboardFooter",      { fg = c.cyan       , bg = 'NONE'       })

  -- DiffView
  hl(0, "DiffViewNormal",       { fg = c.grey       , bg = c.alt_bg     })
  hl(0, "DiffviewStatusAdded",  { fg = c.sign_add   , bg = 'NONE'       })
  hl(0, "DiffviewStatusModified",{ fg = c.sign_change, bg = 'NONE'      })
  hl(0, "DiffviewStatusRenamed",{ fg = c.sign_change, bg = 'NONE'       })
  hl(0, "DiffviewStatusDeleted",{ fg = c.sign_delete, bg = 'NONE'       })
  hl(0, "DiffviewFilePanelInsertion",{ fg = c.sign_add, bg = 'NONE'     })
  hl(0, "DiffviewFilePanelDeletion",{ fg = c.sign_delete, bg = 'NONE'   })
  hl(0, "DiffviewVertSplit",    { fg = 'NONE'       , bg = c.bg         })

  -- Bookmarks
  hl(0, "BookmarkSign",         { fg = c.sign_change, bg = 'NONE'       })
  hl(0, "BookmarkAnnotationSign",{ fg = c.yellow    , bg = 'NONE'       })
  hl(0, "BookmarkLine",         { fg = c.dark_blue  , bg = 'NONE'       })
  hl(0, "BookmarkAnnotationLine",{ fg = c.dark_blue , bg = 'NONE'       })

  hl(0, "BqfPreviewBorder",     { fg = c.fg         , bg = 'NONE'       })
  hl(0, "BqfPreviewRange",      { fg = 'NONE'       , bg = c.dark_blue  })

  hl(0, "CmpItemAbbrDeprecated",{ fg = c.grey       , bg = 'NONE'      , strikethrough=true })
  hl(0, "CmpItemAbbrMatch",     { fg = c.neon_blue  , bg = 'NONE'       })
  hl(0, "CmpItemAbbrMatchFuzzy",{ fg = c.neon_blue  , bg = 'NONE'       })
  hl(0, "CmpItemKindFunction",  { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "CmpItemKindMethod",    { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "CmpItemKindConstructor",{ fg = c.aqua      , bg = 'NONE'       })
  hl(0, "CmpItemKindClass",     { fg = c.orange     , bg = 'NONE'       })
  hl(0, "CmpItemKindEnum",      { fg = c.orange     , bg = 'NONE'       })
  hl(0, "CmpItemKindEvent",     { fg = c.orange     , bg = 'NONE'       })
  hl(0, "CmpItemKindInterface", { fg = c.orange     , bg = 'NONE'       })
  hl(0, "CmpItemKindStruct",    { fg = c.orange     , bg = 'NONE'       })
  hl(0, "CmpItemKindVariable",  { fg = c.pink  , bg = 'NONE'       })
  hl(0, "CmpItemKindField",     { fg = c.green      , bg = 'NONE'       })
  hl(0, "CmpItemKindProperty",  { fg = c.green      , bg = 'NONE'       })
  hl(0, "CmpItemKindEnumMember",{ fg = c.green      , bg = 'NONE'       })
  hl(0, "CmpItemKindConstant",  { fg = c.pink  , bg = 'NONE'       })
  hl(0, "CmpItemKindKeyword",   { fg = c.pink  , bg = 'NONE'       })
  hl(0, "CmpItemKindModule",    { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "CmpItemKindValue",     { fg = c.pink  , bg = 'NONE'       })
  hl(0, "CmpItemKindUnit",      { fg = c.orange     , bg = 'NONE'       })
  hl(0, "CmpItemKindText",      { fg = c.fg         , bg = 'NONE'       })
  hl(0, "CmpItemKindSnippet",   { fg = c.fg         , bg = 'NONE'       })
  hl(0, "CmpItemKindFile",      { fg = c.fg         , bg = 'NONE'       })
  hl(0, "CmpItemKindFolder",    { fg = c.fg         , bg = 'NONE'       })
  hl(0, "CmpItemKindColor",     { fg = c.fg         , bg = 'NONE'       })
  hl(0, "CmpItemKindReference", { fg = c.pink  , bg = 'NONE'       })
  hl(0, "CmpItemKindOperator",  { fg = c.green      , bg = 'NONE'       })
  hl(0, "CmpItemKindTypeParameter",{ fg = c.green   , bg = 'NONE'       })

  -- Packer
  hl(0, "packerString",         { fg = c.orange     , bg = 'NONE'       })
  hl(0, "packerHash",           { fg = c.blue       , bg = 'NONE'       })
  hl(0, "packerOutput",         { fg = c.purple     , bg = 'NONE'       })
  hl(0, "packerRelDate",        { fg = c.grey       , bg = 'NONE'       })
  hl(0, "packerSuccess",        { fg = c.green      , bg = 'NONE'       })
  hl(0, "packerStatusSuccess",  { fg = c.blue       , bg = 'NONE'       })

  -- SymbolOutline (simrat39/symbols-outline.nvim)
  hl(0, "SymbolsOutlineConnector",{ fg = c.grey     , bg = 'NONE'       })
  hl(0, "FocusedSymbol",        { fg = 'NONE'       , bg = c.word_bg    })

  -- Notify (rcarriga/nvim-notify)
  hl(0, "NotifyERRORBorder",    { fg = c.red        , bg = 'NONE'       })
  hl(0, "NotifyWARNBorder",     { fg = c.orange     , bg = 'NONE'       })
  hl(0, "NotifyINFOBorder",     { fg = c.blue       , bg = 'NONE'       })
  hl(0, "NotifyDEBUGBorder",    { fg = c.grey       , bg = 'NONE'       })
  hl(0, "NotifyTRACEBorder",    { fg = c.purple     , bg = 'NONE'       })
  hl(0, "NotifyERRORIcon",      { fg = c.red        , bg = 'NONE'       })
  hl(0, "NotifyWARNIcon",       { fg = c.orange     , bg = 'NONE'       })
  hl(0, "NotifyINFOIcon",       { fg = c.blue       , bg = 'NONE'       })
  hl(0, "NotifyDEBUGIcon",      { fg = c.grey       , bg = 'NONE'       })
  hl(0, "NotifyTRACEIcon",      { fg = c.purple     , bg = 'NONE'       })
  hl(0, "NotifyERRORTitle",     { fg = c.red        , bg = 'NONE'       })
  hl(0, "NotifyWARNTitle",      { fg = c.orange     , bg = 'NONE'       })
  hl(0, "NotifyINFOTitle",      { fg = c.blue       , bg = 'NONE'       })
  hl(0, "NotifyDEBUGTitle",     { fg = c.grey       , bg = 'NONE'       })
  hl(0, "NotifyTRACETitle",     { fg = c.purple     , bg = 'NONE'       })


  -- Hope (EasyMotion-like jump to location by lerrers)
  hl(0, "HopNextKey",           { fg = c.white0     , bg = 'NONE'       })
  hl(0, "HopNextKey1",          { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "HopNextKey2",          { fg = c.orange     , bg = 'NONE'       })
  hl(0, "HopUnmatched",         { fg = c.warmgrey   , bg = 'NONE'       })
  hl(0, "HopPreview",           { fg = c.green      , bg = 'NONE'       })

  -- Crates (rust dependencies manager helper)
  hl(0, "CratesNvimLoading",    { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "CratesNvimVersion",    { fg = c.aqua       , bg = 'NONE'       })

  -- Misc
  hl(0, "diffAdded",            { fg = c.green      , bg = 'NONE'       })
  hl(0, "diffRemoved",          { fg = c.pink       , bg = 'NONE'       })
  hl(0, "diffFileId",           { fg = c.blue       , bg = 'NONE'      , bold=true, reverse=true })
  hl(0, "diffFile",             { fg = c.alt_bg     , bg = 'NONE'       })
  hl(0, "diffNewFile",          { fg = c.green      , bg = 'NONE'       })
  hl(0, "diffOldFile",          { fg = c.red        , bg = 'NONE'       })

  hl(0, "debugPc",              { fg = 'NONE'       , bg = c.dark_blue  })
  hl(0, "debugBreakpoint",      { fg = c.bg         , bg = c.red        })
  hl(0, "DapBreakpoint",        { fg = c.red        , bg = 'NONE'       })

  hl(0, "CodiVirtualText",      { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "SniprunVirtualTextOk", { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "SniprunFloatingWinOk", { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "SniprunVirtualTextErr",{ fg = c.red        , bg = 'NONE'       })
  hl(0, "SniprunFloatingWinErr",{ fg = c.red        , bg = 'NONE'       })

  -- Language
  hl(0, "luaTableBlock",        { fg = c.cyan       , bg = 'NONE'       })

  hl(0, "xmlTag",               { fg = c.pink       , bg = 'NONE'       })
  hl(0, "xmlTagName",           { fg = c.orange     , bg = 'NONE'       })
  hl(0, "xmlEndTag",            { fg = c.pink       , bg = 'NONE'       })
  hl(0, "xmlAttrib",            { fg = c.green      , bg = 'NONE'       })

  hl(0, "hclTSPunctSpecial",    { fg = c.alt_fg     , bg = 'NONE'       })
  hl(0, "htmlH1",               { fg = c.fg         , bg = 'NONE'       })
  hl(0, "htmlH2",               { fg = c.fg         , bg = 'NONE'       })
  hl(0, "htmlH3",               { fg = c.fg         , bg = 'NONE'       })
  hl(0, "htmlH4",               { fg = c.fg         , bg = 'NONE'       })
  hl(0, "htmlH5",               { fg = c.fg         , bg = 'NONE'       })
  hl(0, "htmlH6",               { fg = c.fg         , bg = 'NONE'       })
  hl(0, "htmlHead",             { fg = c.fg         , bg = 'NONE'       })
  hl(0, "htmlTitle",            { fg = c.fg         , bg = 'NONE'       })
  hl(0, "htmlArg",              { fg = c.green      , bg = 'NONE'       })
  hl(0, "htmlTag",              { fg = c.white      , bg = 'NONE'       })
  hl(0, "htmlTagN",             { fg = c.blue       , bg = 'NONE'       })
  hl(0, "htmlTagName",          { fg = c.pink       , bg = 'NONE'       })
  hl(0, "htmlComment",          { fg = c.green      , bg = 'NONE'       })
  hl(0, "htmlLink",             { fg = c.orange     , bg = 'NONE'      , underline=true })
  -- css
  hl(0, "cssBraces",            { fg = c.white      , bg = 'NONE'       })
  hl(0, "cssInclude",           { fg = c.purple     , bg = 'NONE'       })
  hl(0, "cssTagName",           { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "cssClassName",         { fg = c.green      , bg = 'NONE'       })
  hl(0, "cssPseudoClass",       { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "cssPseudoClassId",     { fg = c.purple     , bg = 'NONE'       })
  hl(0, "cssPseudoClassLang",   { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "cssIdentifier",        { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "cssProp",              { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "cssDefinition",        { fg = c.fg         , bg = 'NONE'       })
  hl(0, "cssAttr",              { fg = c.orange     , bg = 'NONE'       })
  hl(0, "cssAttrRegion",        { fg = c.orange     , bg = 'NONE'       })
  hl(0, "cssColor",             { fg = c.purple     , bg = 'NONE'       })
  hl(0, "cssFunction",          { fg = c.purple     , bg = 'NONE'       })
  hl(0, "cssFunctionName",      { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "cssVendor",            { fg = c.orange     , bg = 'NONE'       })
  hl(0, "cssValueNumber",       { fg = c.orange     , bg = 'NONE'       })
  hl(0, "cssValueLength",       { fg = c.purple     , bg = 'NONE'       })
  hl(0, "cssUnitDecorators",    { fg = c.orange     , bg = 'NONE'       })
  hl(0, "cssStyle",             { fg = c.fg         , bg = 'NONE'       })
  hl(0, "cssImportant",         { fg = c.blue       , bg = 'NONE'       })

  hl(0, "jsonKeyword",          { fg = c.blue       , bg = 'NONE'       })
  hl(0, "yamlBlockMappingKey",  { fg = c.blue       , bg = 'NONE'       })
  hl(0, "tomlTSProperty",       { fg = c.blue       , bg = 'NONE'       })

  -- nvim-treesitter (since cmmit at Oct 16, 2022)
  -- TS* now is deprecated
  -- Misc
  hl(0, "@comment",             { link = 'Comment' })
  hl(0, "@error",               { link = 'Error' })
  hl(0, "@preproc",             { link = 'PreProc' })
  hl(0, "@define",              { link = 'Define' })
  hl(0, "@operator",            { link = 'Operator' })
  hl(0, "@none",                { fg = 'NONE', bg = 'NONE' })

  -- Punctuation
  hl(0, "@punctuation.delimiter",{ link = 'Delimiter' })
  hl(0, "@punctuation.bracket", { link = 'Delimiter' })
  hl(0, "@punctuation.special", { link = 'Delimiter' })

  -- Literals
  hl(0, "@string",              { link = 'String' })
  hl(0, "@string.regex",        { link = 'String' })
  hl(0, "@string.escape",       { link = 'Constant' })
  hl(0, "@string.special",      { link = 'SpecialChar' })
  hl(0, "@character",           { link = 'Character' })
  hl(0, "@character.special",   { link = 'SpecialChar' })
  hl(0, "@boolean",             { link = 'Boolean' })
  hl(0, "@number",              { link = 'Number' })
  hl(0, "@float",               { link = 'Float' })

  -- Functions
  hl(0, "@function",            { link = 'FunctionDefine' })
  hl(0, "@function.call",       { link = 'Function' })
  hl(0, "@function.builtin",    { link = 'Keyword' }) -- Special
  hl(0, "@function.macro",      { link = 'Macro' })
  hl(0, "@method",              { link = 'FunctionDefine' })
  hl(0, "@method.call",         { link = 'Function' })
  hl(0, "@constructor",         { link = 'Type' }) --Special
  hl(0, "@parameter",           { link = 'Identifier' })

  -- Keywords
  hl(0, "@keyword",             { link = 'Keyword' })
  hl(0, "@keyword.function",    { link = 'Keyword' })
  hl(0, "@keyword.operator",    { link = 'Keyword' })
  hl(0, "@keyword.return",      { link = 'Keyword' })
  hl(0, "@conditional",         { link = 'Conditional' })
  hl(0, "@repeat",              { link = 'Repeat' })
  hl(0, "@debug",               { link = 'Debug' })
  hl(0, "@label",               { link = 'Label' })
  hl(0, "@include",             { link = 'Include' })
  hl(0, "@exception",           { link = 'Exception' })

  -- Types
  hl(0, "@type",                { link = 'Type' })
  hl(0, "@type.builtin",        { link = 'Keyword' })
  hl(0, "@type.qualifier",      { link = 'Keyword' }) --Type
  hl(0, "@type.definition",     { link = 'Typedef' })
  hl(0, "@storageclass",        { link = 'StorageClass' })
  hl(0, "@attribute",           { link = 'PreProc' })
  hl(0, "@field",               { link = 'Identifier' })
  hl(0, "@property",            { link = 'Identifier' })

  -- Identifiers
  hl(0, "@variable",            { link = 'Normal' })
  hl(0, "@variable.builtin",    { link = 'Keyword' }) -- Special
  hl(0, "@constant",            { fg = c.dark_pink, bg = 'NONE' }) --link = 'Constant' })
  hl(0, "@constant.builtin",    { link = 'Special' })
  hl(0, "@constant.macro",      { link = 'Define' })
  hl(0, "@namespace",           { link = 'Include' })
  hl(0, "@symbol",              { link = 'Identifier' })

  -- Text
  hl(0, "@text",                { link = 'Normal' })
  hl(0, "@text.strong",         { link = 'Bold' })
  hl(0, "@text.emphasis",       { link = 'Italic' })
  hl(0, "@text.underline",      { link = 'Underlined' })
  hl(0, "@text.strike",         { fg = 'NONE', bg = 'NONE', strikethrough = true })
  hl(0, "@text.title",          { link = 'Title' })
  hl(0, "@text.literal",        { link = 'String' })
  hl(0, "@text.uri",            { link = 'Underlined' })
  hl(0, "@text.math",           { link = 'Special' })
  hl(0, "@text.environment",    { link = 'Macro' })
  hl(0, "@text.environment.name",{ link = 'Type' })
  hl(0, "@text.reference",      { link = 'Constant' })
  hl(0, "@text.todo",           { link = 'Todo' })
  hl(0, "@text.note",           { link = 'SpecialComment' })
  hl(0, "@text.warning",        { link = 'WarningMsg' })
  hl(0, "@text.danger",         { link = 'ErrorMsg' })

  -- Tags
  hl(0, "@tag",                 { link = 'Tag' })
  hl(0, "@tag.attribute",       { link = 'Identifier' })
  hl(0, "@tag.delimiter",       { link = 'Delimiter' })


  hl(0, "CmpDocumentation",     { fg = c.white      , bg = c.bg })
  hl(0, "CmpDocumentationBorder",{fg = c.white      , bg = c.bg })
  hl(0, "CmpItemAbbr",          { fg = c.white      , bg = 'NONE'       })
  hl(0, "CmpItemKindDefault",   { fg = c.white      , bg = 'NONE'       })
  hl(0, "CmpItemMenu",          { fg = c.warmgrey   , bg = 'NONE'       })
  hl(0, "CursorWord0",          { fg = c.black      , bg = c.white      })
  hl(0, "CursorWord1",          { fg = c.black      , bg = c.white      })
  hl(0, "DapUIType",            { fg = c.green      , bg = 'NONE'      , italic=true })
  hl(0, "DapUIValue",           { fg = c.yellow     , bg = 'NONE'       })
  hl(0, "DapUIVariable",        { fg = c.orange     , bg = 'NONE'       })
  hl(0, "DiffviewNormal",       { fg = 'NONE'       , bg = c.ui_bg      })
  hl(0, "FloatBorder",          { fg = c.ui_bg      , bg = c.ui_bg      })
  hl(0, "HarpoonBorder",        { fg = c.white      , bg = c.ui_bg      })
  hl(0, "HarpoonWindow",        { fg = c.white      , bg = c.ui_bg      })
  hl(0, "InlayHints",           { fg = c.aqua       , bg = 'NONE'       })
  hl(0, "LspSignatureHintVirtualText",{ fg = c.lightorange, bg = 'NONE', bold=true })

  hl(0, "LuaLineDiffAdd",       { fg = c.green      , bg = 'NONE'       })
  hl(0, "LuaLineDiffChange",    { fg = c.blue       , bg = 'NONE'       })
  hl(0, "LuaLineDiffDelete",    { fg = c.red        , bg = 'NONE'       })

  hl(0, "NoiceCmdlineIconCmdline",{ fg = c.aqua     , bg = 'NONE'       })
  hl(0, "NoiceCmdlineIconFilter",{ fg = c.yellow    , bg = 'NONE'       })
  hl(0, "NoiceCmdlineIconHelp", { fg = c.dark_pink  , bg = 'NONE'       })
  hl(0, "NoiceCmdlineIconLua",  { fg = c.red        , bg = 'NONE'       })
  hl(0, "NoiceCmdlineIconSearch",{ fg = c.orange    , bg = 'NONE'       })
  hl(0, "NoiceCmdlinePopup",    { fg = 'NONE'       , bg = c.ui_bg      })
  hl(0, "NoiceCmdlinePopupBorder",{ fg = c.ui_bg    , bg = c.ui_bg      })
  hl(0, "NoiceCmdlinePopupBorderCmdline",{ fg = c.ui_bg, bg = c.ui_bg   })
  hl(0, "NoiceCmdlinePopupBorderFilter",{ fg = c.ui_bg, bg = c.ui_bg    })
  hl(0, "NoiceCmdlinePopupBorderLua",{ fg = c.ui_bg , bg = c.ui_bg      })
  hl(0, "NoiceCmdlinePopupBorderSearch",{ fg = c.ui_bg, bg = c.ui_bg    })
  hl(0, "NoiceFormatProgressDone",{ fg = 'NONE'     , bg = c.ui_bg      })
  hl(0, "NoiceFormatProgressTodo",{ fg = 'NONE'     , bg = c.ui_bg      })
  hl(0, "NoiceFormatTitle",     { fg = 'NONE'       , bg = c.bg         })
  hl(0, "NoiceLspProgressClient",{ fg = c.yellow    , bg = c.bg         , bold=true })
  hl(0, "NoiceLspProgressSpinner",{ fg = c.aqua     , bg = c.bg         })
  hl(0, "NoiceLspProgressTitle",{ fg = c.white      , bg = c.bg         })
  hl(0, "NoiceVirtualText",     { fg = c.warmgrey   , bg = 'NONE'      , italic=true })

  hl(0, "NvimTreeCursorLineNr", { fg = c.yellow     , bg = c.word_bg    })
  hl(0, "NvimTreeLineNr",       { fg = c.orange     , bg = c.ui_bg      })
  hl(0, "NvimTreeWindowPicker", { fg = c.pink       , bg = c.ui_bg      , bold=true })
  hl(0, "PmenuSelBold",         { fg = c.white      , bg = c.pmenu_sel_bg })
  hl(0, "Tabline",              { fg = c.warmgrey   , bg = c.ui_bg       })

  hl(0, "Terminal",             { fg = c.white      , bg = c.bg         })
  hl(0, "TreesitterContextLineNumber",{fg = c.purple, bg = c.pmenu_bg   })
  hl(0, "TreesitterContext",    { fg = 'NONE'       , bg = c.pmenu_bg   })
  hl(0, "WhiteBorder",          { fg = c.white      , bg = c.ui_bg      })
  hl(0, "dbui_tables",          { fg = c.white      , bg = 'NONE'       })

  -- for trailing whitespace use NvimInternalError guibg=Red

end

return theme
